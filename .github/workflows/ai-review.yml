name: AI Code Review
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR diff + files
        id: diff
        run: |
          # Raw diff for precision
          curl -sSL -H "Accept: application/vnd.github.v3.diff" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}" > pr.diff

          # Compare API for filenames (uses gh CLI preinstalled on runner)
          BASE_SHA=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }} --jq '.base.sha')
          HEAD_SHA=$(gh api repos/${{ github.repository }}/pulls/${{ github.event.number }} --jq '.head.sha')
          gh api repos/${{ github.repository }}/compare/$BASE_SHA...$HEAD_SHA --jq '[.files[].filename] | join(", ")' > files.txt
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run AI review
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          python - << 'PY'
import os, json, requests, re

def sanitize(diff):
    blocked = [r'\.env', r'\.pem$', r'\.key$', r'\.pfx$', r'\.crt$', r'supabase/.*(service|anon)']
    if any(re.search(b, diff, re.I) for b in blocked):
        return "DIFF REMOVED: matched secret/binary policy."
    return diff[:180_000]

with open("pr.diff","r",encoding="utf-8",errors="ignore") as f:
    diff = sanitize(f.read())
with open("files.txt","r",encoding="utf-8",errors="ignore") as f:
    files = f.read().strip().strip('"')

title = os.environ.get("PR_TITLE","")
body  = os.environ.get("PR_BODY","")
prompt = f"""Act as a meticulous senior reviewer for a TypeScript/React app.
Focus on: correctness, security/PII, auth flows, race conditions, risky migrations.
Also flag missing tests/docs. Be concise. Cite filenames and line numbers when possible.

PR Title: {title}
PR Description: {body or "(none)"}
Files changed: {files}

Unified diff (truncated if large):
{diff}
"""

r = requests.post("https://api.openai.com/v1/responses",
  headers={"Authorization": f"Bearer {os.environ['OPENAI_API_KEY']}",
           "Content-Type": "application/json"},
  json={"model":"gpt-5.1-mini", "input": prompt, "max_output_tokens": 1200})
r.raise_for_status()
review = r.json().get("output",[{}])[0].get("content",[{}])[0].get("text","(no output)")

# Post comment back to PR
repo = os.environ["REPO"]; pr = os.environ["PR_NUMBER"]
requests.post(f"https://api.github.com/repos/{repo}/issues/{pr}/comments",
  headers={"Authorization": f"Bearer {os.environ['GH_TOKEN']}",
           "Accept":"application/vnd.github+json"},
  json={"body": review}).raise_for_status()
PY
